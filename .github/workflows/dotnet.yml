# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_NOLOGO: 1
      CI: true

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Check code formatting (Main Projects)
      run: |
        dotnet format --include LoccarDomain --verify-no-changes --verbosity diagnostic
        dotnet format --include LoccarApplication --verify-no-changes --verbosity diagnostic  
        dotnet format --include LoccarInfra --verify-no-changes --verbosity diagnostic
        dotnet format --include LoccarLocadora --verify-no-changes --verbosity diagnostic
      
    - name: Build with Code Analysis
      run: dotnet build --no-restore --configuration Release --verbosity normal /p:TreatWarningsAsErrors=false /p:WarningsAsErrors=""
      
    - name: Run Code Analysis
      run: |
        dotnet build --no-restore --configuration Release --verbosity normal > build-output.log 2>&1 || true
        echo "=== Code Analysis Results ==="
        grep -E "(warning|error) (CA|SA)[0-9]+" build-output.log || echo "No critical code analysis warnings found"
        echo "=== End Code Analysis Results ==="
      
    - name: Test
      run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --logger trx --results-directory TestResults/ --blame-hang-timeout 5m
      env:
        LC_ALL: C
        LANG: C
        DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: 1
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: TestResults/
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-results
        path: TestResults/*/coverage.cobertura.xml

  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Check code formatting (Main Projects)
      run: |
        echo "Checking LoccarDomain formatting..."
        dotnet format --include LoccarDomain --verify-no-changes --verbosity diagnostic
        echo "Checking LoccarApplication formatting..."  
        dotnet format --include LoccarApplication --verify-no-changes --verbosity diagnostic
        echo "Checking LoccarInfra formatting..."
        dotnet format --include LoccarInfra --verify-no-changes --verbosity diagnostic
        echo "Checking LoccarLocadora formatting..."
        dotnet format --include LoccarLocadora --verify-no-changes --verbosity diagnostic
      
    - name: Build with full analysis
      run: dotnet build --configuration Release --verbosity normal /p:TreatWarningsAsErrors=false
